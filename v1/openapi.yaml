openapi: 3.0.2
info:
  version: 1.0.1
  title: ZenAPI
  description: |
    # Overview

    This is the reference documentation for the Zenvia *REST-like* API.

    This API is based on resources which are represented by JSON format and are manipulated using HTTP protocol.

    ## What you can do with this API

    You can send messages for the following channels:

    * SMS
    * WhatsApp
    * Facebook

    You can subscribe for some events and receive then in one webhook endpoint.
    The available events are:

    * Messages: You can receive messages events. You can select the channel of the messages which you want to receive as much as her direction.
    * Messages status: You can receive status update for sent messages.

    ## What you need before start

    Before use this API you need the following prerequisites:

    * **Zenvia Account**: create one account on [Zenvia platform site](https://app.zenvia.com/)
    * **Integrations**: to send or receive messages for desired channels you need to configure these channels on [integrations page](https://app.zenvia.com/home/credentials)
    * **API Token**: create one API token on [API console](https://app.zenvia.com/home/api)
    * **Webhook** (optional): to receive messages you need to subscribe for this events using the [subscriptions API resources](#tag/Subscriptions)

    You can use [sandbox](#section/Getting-started-with-Sandbox) to start using and test this API immediately.

    # Getting started with Sandbox

    The fastest way to start using this API is our [Sandbox available on Zenvia platform](https://app.zenvia.com/home/sandbox).

    When you create a new Sandbox, you will be guided step-by-step to send and receive messages using one desired channel.

    [Click here and start sending and receiving messages using WhatsApp or SMS using this API.](https://app.zenvia.com/home/sandbox)

    # SDKs

    SDKs make it easy to use our APIs just by including them in your software.

    These helper libraries are available in the [Node](https://github.com/zenvia/zenvia-sdk-node) and [Java](https://github.com/zenvia/zenvia-sdk-java) programming languages on our [GitHub](https://github.com/zenvia).

    # HTTP Methods

    HTTP methods are used for manipulate resources.

    Not all resources have all operations, see the reference of each resource.

    Methods used with collection endpoints:

    | Http Method      | Operation                | Success HTTP status |
    |:-----------------|:-------------------------|:--------------------|
    | GET              | List collection items    | 200 - Ok            |
    | POST             | Create a new item        | 200 - Ok            |

    Methods used with item endpoints:

    | Http Method      | Operation                    | Success HTTP status |
    |:-----------------|:-----------------------------|:--------------------|
    | GET              | Retrieve one resource item   | 200 - Ok            |
    | DELETE           | Delete one resource item     | 204 - No content    |
    | PATCH            | Update one resource item     | 200 - Ok            |

    When one operation is executed successfully, the API will respond with 2xx status code.

    # Error Handling

    When one error occurs, the API will return one HTTP code 4xx or 5xx and the payload with Error Object.

    The error object have the follwing schema:

    <SchemaDefinition schemaRef="#/components/schemas/error.base" />

    Responses error codes are detailed below.

    | Http Status Code | Code                 | Message                          | Retry request |
    |:-----------------|:---------------------|:---------------------------------|:--------------|
    | 400              | VALIDATION_ERROR     | Validation error                 | No            |
    | 401              | AUTHENTICATION_ERROR | No authorization token was found | No            |
    | 404              | NOT_FOUND            | Not found                        | No            |
    | 409              | DUPLICATED           | Entity already exists            | No            |
    | 500              | INTERNAL_ERROR       | Internal error                   | Yes           |

    # Authentication

    ## TOKEN
    To use this API you need to send the API token in all requests.

    This TOKEN needs to be sent in HTTP header 'X-API-TOKEN'.

    Example:
    ```X-API-TOKEN: hKp94crjv9OF3UGrCpSXUJw1-UYHhRvLKNLt```

    You can generate your token on [API console](https://app.zenvia.com/home/api) inside Zenvia platform website.

    ## JWT

    The JWT token is primarily used by front-end applications for user interactions.

    For server to server integrations use [TOKEN](/#section/Authentication/TOKEN) authentication type.
  termsOfService: 'https://zenvia.com/'
  contact:
    name: API Support
    email: atendimento@zenvia.com
    url: 'https://zenapi.zenvia.com/'
  license:
    name: MIT
    url: 'https://raw.githubusercontent.com/zenvia/zenvia-openapi-spec/master/LICENSE.md'
  x-logo:
    url: 'https://zenvia-static.s3.amazonaws.com/brand/zenvia-brand-mark-regular.svg'
servers:
  - url: 'https://api.zenvia.com/v1'
paths:
  /channels/facebook/messages:
    post:
      description: Send a Facebook message
      tags:
        - Facebook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message.facebook'
      responses:
        '200':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message.facebook'
        default:
          $ref: '#/components/responses/error'
      x-code-samples:
        - lang: Shell
          label: Bash
          source: |
            curl "https://api.zenvia.com/v1/channels/facebook/messages" \
            -H "Content-Type: application/json" \
            -H "X-API-TOKEN: YOUR_API_TOKEN" \
            -d '{
              "from": "sender-identifier",
              "to": "recipient-identifier",
              "contents": [{
                "type": "text",
                "text": "Some text message"
              }]
            }'
        - lang: JavaScript
          label: Node.js
          source: |
            const { post } = require('request-promise');

            post({
              uri: 'https://api.zenvia.com/v1/channels/facebook/messages',
              headers: {
                'X-API-TOKEN': 'YOUR_API_TOKEN'
              },
              body: {
                from: 'sender-identifier',
                to: 'recipient-identifier',
                contents: [{
                  type: 'text',
                  text: 'Some text message'
                }]
              },
              json: true
            })
            .then((response) => {
              console.log('Response:', response);
            })
            .catch((error) => {
              console.log('Error:', error);
            });
        - lang: JavaScript
          label: Node.js SDK
          source: |
            /**
             * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/facebook-send-text-message.js
             */

            import { Client, TextContent } from '@zenvia/sdk';

            const client = new Client('YOUR_API_TOKEN');

            const facebook = client.getChannel('facebook');

            const content = new TextContent('Some text message');

            facebook.sendMessage('sender-identifier', 'recipient-identifier', content)
            .then((response) => {
              console.log('Response:', response);
            })
            .catch((error) => {
              console.log('Error:', error);
            });
        - lang: Java
          label: Java SDK
          source: |
            import com.zenvia.api.sdk.client.Channel;
            import com.zenvia.api.sdk.client.apache.Client;
            import com.zenvia.api.sdk.contents.TextContent;
            import com.zenvia.api.sdk.messages.Message;

            public class FacebookSendTextMessage {

              public static void main (String arg []) {
                Client client = new Client("YOUR_API_TOKEN");

                Channel facebook = client.getChannel("facebook");

                TextContent content = new TextContent("Some text message");

                try {
                  Message response = facebook.sendMessage("sender-identifier", "recipient-identifier", content);
                  System.out.println("Response: " + response.toString());
                } catch(Exception e) {
                  System.out.println("Error: " + e.getMessage());
                }
              }

            }
  /channels/sms/messages:
    post:
      description: Send a SMS message
      tags:
        - SMS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message.sms'
      responses:
        '200':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message.sms'
        default:
          $ref: '#/components/responses/error'
      x-code-samples:
        - lang: Shell
          label: Bash
          source: |
            curl "https://api.zenvia.com/v1/channels/sms/messages" \
            -H "Content-Type: application/json" \
            -H "X-API-TOKEN: YOUR_API_TOKEN" \
            -d '{
              "from": "sender-identifier",
              "to": "recipient-identifier",
              "contents": [{
                "type": "text",
                "text": "Some text message"
              }]
            }'
        - lang: JavaScript
          label: Node.js
          source: |
            const { post } = require('request-promise');

            post({
              uri: 'https://api.zenvia.com/v1/channels/sms/messages',
              headers: {
                'X-API-TOKEN': 'YOUR_API_TOKEN'
              },
              body: {
                from: 'sender-identifier',
                to: 'recipient-identifier',
                contents: [{
                  type: 'text',
                  text: 'Some text message'
                }]
              },
              json: true
            })
            .then((response) => {
              console.log('Response:', response);
            })
            .catch((error) => {
              console.log('Error:', error);
            });
        - lang: JavaScript
          label: Node.js SDK
          source: |
            /**
             * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/sms-send-text-message.js
             */

            import { Client, TextContent } from '@zenvia/sdk';

            const client = new Client('YOUR_API_TOKEN');

            const sms = client.getChannel('sms');

            const content = new TextContent('Some text message');

            sms.sendMessage('sender-identifier', 'recipient-identifier', content)
            .then((response) => {
              console.log('Response:', response);
            })
            .catch((error) => {
              console.log('Error:', error);
            });
        - lang: Java
          label: Java SDK
          source: |
            import com.zenvia.api.sdk.client.Channel;
            import com.zenvia.api.sdk.client.apache.Client;
            import com.zenvia.api.sdk.contents.TextContent;
            import com.zenvia.api.sdk.messages.Message;

            public class SmsSendTextMessage {

              public static void main (String arg []) {
                Client client = new Client("YOUR_API_TOKEN");

                Channel sms = client.getChannel("sms");

                TextContent content = new TextContent("Some text message");

                try {
                  Message response = sms.sendMessage("sender-identifier", "recipient-identifier", content);
                  System.out.println("Response: " + response.toString());
                } catch(Exception e) {
                  System.out.println("Error: " + e.getMessage());
                }
              }

            }
  /channels/whatsapp/messages:
    post:
      description: Send a WhatsApp message
      tags:
        - WhatsApp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/message.whatsapp'
      responses:
        '200':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/message.whatsapp'
        default:
          $ref: '#/components/responses/error'
      x-code-samples:
        - lang: Shell
          label: Bash
          source: |
            curl "https://api.zenvia.com/v1/channels/whatsapp/messages" \
            -H "Content-Type: application/json" \
            -H "X-API-TOKEN: YOUR_API_TOKEN" \
            -d '{
              "from": "sender-identifier",
              "to": "recipient-identifier",
              "contents": [{
                "type": "text",
                "text": "Some text message"
              }]
            }'
        - lang: JavaScript
          label: Node.js
          source: |
            const { post } = require('request-promise');

            post({
              uri: 'https://api.zenvia.com/v1/channels/whatsapp/messages',
              headers: {
                'X-API-TOKEN': 'YOUR_API_TOKEN'
              },
              body: {
                from: 'sender-identifier',
                to: 'recipient-identifier',
                contents: [{
                  type: 'text',
                  text: 'Some text message'
                }]
              },
              json: true
            })
            .then((response) => {
              console.log('Response:', response);
            })
            .catch((error) => {
              console.log('Error:', error);
            });
        - lang: JavaScript
          label: Node.js SDK
          source: |
            /**
             * Example: https://github.com/zenvia/zenvia-sdk-node/blob/master/examples/whatsapp-send-text-message.js
             */

            import { Client, TextContent } from '@zenvia/sdk';

            const client = new Client('YOUR_API_TOKEN');

            const whatsapp = client.getChannel('whatsapp');

            const content = new TextContent('Some text message');

            whatsapp.sendMessage('sender-identifier', 'recipient-identifier', content)
            .then((response) => {
              console.log('Response:', response);
            })
            .catch((error) => {
              console.log('Error:', error);
            });
        - lang: Java
          label: Java SDK
          source: |
            import com.zenvia.api.sdk.client.Channel;
            import com.zenvia.api.sdk.client.apache.Client;
            import com.zenvia.api.sdk.contents.TextContent;
            import com.zenvia.api.sdk.messages.Message;

            public class WhatsAppSendTextMessage {

              public static void main (String arg []) {
                Client client = new Client("YOUR_API_TOKEN");

                Channel whatsapp = client.getChannel("whatsapp");

                TextContent content = new TextContent("Some text message");

                try {
                  Message response = whatsapp.sendMessage("sender-identifier", "recipient-identifier", content);
                  System.out.println("Response: " + response.toString());
                } catch(Exception e) {
                  System.out.println("Error: " + e.getMessage());
                }
              }

            }
  /reports/flow/entries:
    get:
      description: Retrieve all entries applying the given filters
      tags:
        - Flow Report
      responses:
        '200':
          description: Flow report entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reports.flow.entries.base'
        default:
          $ref: '#/components/responses/error'
    parameters:
      - $ref: '#/components/parameters/reports.flow.startDate'
      - $ref: '#/components/parameters/reports.flow.endDate'
      - $ref: '#/components/parameters/reports.flow.flowId'
      - $ref: '#/components/parameters/reports.flow.dispatchId'
      - $ref: '#/components/parameters/reports.flow.sessionId'
  /reports/message/entries:
    get:
      description: Retrieve all entries applying the given filters
      tags:
        - Message Report
      responses:
        '200':
          description: Message report entries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/reports.message.entry.base'
        default:
          $ref: '#/components/responses/error'
    parameters:
      - $ref: '#/components/parameters/reports.message.startDate'
      - $ref: '#/components/parameters/reports.message.endDate'
      - $ref: '#/components/parameters/reports.message.channels'
      - $ref: '#/components/parameters/reports.message.type'
  /subscriptions:
    post:
      description: Create a new webhook
      tags:
        - Webhooks
      responses:
        '200':
          description: Created subscription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription.all'
        default:
          $ref: '#/components/responses/error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscription.all'
      callbacks:
        onEvent:
          $ref: '#/components/callbacks/subscription-event'
    get:
      description: List all webhooks
      tags:
        - Webhooks
      responses:
        '200':
          description: Webhook Object List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/subscription.all'
        default:
          $ref: '#/components/responses/error'
  '/subscriptions/{subscriptionId}':
    get:
      description: Retrieve one webhook by id
      tags:
        - Webhooks
      responses:
        '200':
          description: Webhook Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription.all'
        default:
          $ref: '#/components/responses/error'
    delete:
      description: Delete one webhook by id
      tags:
        - Webhooks
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
    patch:
      description: Update one webhook by id
      tags:
        - Webhooks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscription.partial-subscription'
      responses:
        '200':
          description: Webhook Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription.all'
        default:
          $ref: '#/components/responses/error'
    parameters:
      - $ref: '#/components/parameters/subscriptionId'
  /templates:
    post:
      description: Create a new
      tags:
        - Templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templates.template'
      responses:
        '200':
          description: Created template
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templates.template'
        default:
          $ref: '#/components/responses/error'
    get:
      description: List all templates
      tags:
        - Templates
      parameters:
        - $ref: '#/components/parameters/templates.channel'
        - $ref: '#/components/parameters/templates.senderId'
        - $ref: '#/components/parameters/templates.status'
      responses:
        '200':
          description: Template Object List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/templates.template'
        default:
          $ref: '#/components/responses/error'
  '/templates/{templateId}':
    get:
      description: Retrieve one template by id
      tags:
        - Templates
      responses:
        '200':
          description: Template Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templates.template'
        default:
          $ref: '#/components/responses/error'
    delete:
      description: Delete one template by id
      tags:
        - Templates
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
    patch:
      description: Update one template by id
      tags:
        - Templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templates.partial-template'
      responses:
        '200':
          description: Template Object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templates.template'
        default:
          $ref: '#/components/responses/error'
    parameters:
      - $ref: '#/components/parameters/templateId'
  '/templates/{templateId}/comments':
    post:
      description: Create a new comment
      tags:
        - Templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/templates.template-comment'
      responses:
        '200':
          description: Created comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/templates.template-comment'
        default:
          $ref: '#/components/responses/error'
    get:
      description: List all comments
      tags:
        - Templates
      responses:
        '200':
          description: Comment Object List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/templates.template-comment'
        default:
          $ref: '#/components/responses/error'
    parameters:
      - $ref: '#/components/parameters/templateId'
  '/templates/{templateId}/comments/{templateCommentId}':
    delete:
      description: Delete comment by id
      tags:
        - Templates
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
    parameters:
      - $ref: '#/components/parameters/templateId'
      - $ref: '#/components/parameters/templateCommentId'
components:
  schemas:
    content.base:
      type: object
      properties:
        type:
          title: Content type
          type: string
      required:
        - type
    content.contacts:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            contacts:
              description: A list of contacts
              type: array
              items:
                type: object
                properties:
                  addresses:
                    description: A list of contact addresses
                    type: array
                    items:
                      type: object
                      properties:
                        street:
                          description: Street number and name
                          type: string
                        city:
                          description: City name
                          type: string
                        state:
                          description: State abbreviation
                          type: string
                        zip:
                          description: ZIP code
                          type: string
                        country:
                          description: Full country name
                          type: string
                        countryCode:
                          description: Two-letter country abbreviation
                          type: string
                        type:
                          description: The type of the address
                          type: string
                          enum:
                            - HOME
                            - WORK
                    minItems: 0
                  birthday:
                    description: The birthday of the contact
                    type: string
                  contactImage:
                    description: Base64-encoded image
                    type: string
                  emails:
                    description: A list of e-mails
                    type: array
                    items:
                      type: object
                      properties:
                        email:
                          description: E-mail address
                          type: string
                        type:
                          description: The type of e-mail
                          type: string
                          enum:
                            - HOME
                            - WORK
                    minItems: 0
                  ims:
                    description: A list of messaging contact information
                    type: array
                    items:
                      type: object
                      properties:
                        service:
                          description: Instant messaging service name
                          type: string
                        userId:
                          description: User identifier in this instant messaging service
                          type: string
                    minItems: 0
                  name:
                    description: Full contact name
                    type: object
                    properties:
                      formattedName:
                        description: Full name as it normally appears
                        type: string
                      firstName:
                        description: First name
                        type: string
                      lastName:
                        description: Last name
                        type: string
                      middleName:
                        description: Middle name
                        type: string
                      suffix:
                        description: Name suffix
                        type: string
                      prefix:
                        description: Name preffix
                        type: string
                    required:
                      - formattedName
                      - firstName
                  org:
                    title: Organization
                    description: Contact organization information
                    type: object
                    properties:
                      company:
                        description: Name of the contact's company
                        type: string
                      department:
                        description: Name of the contact's department
                        type: string
                      title:
                        description: Contact's business title
                        type: string
                  phones:
                    description: A list of contact phone numbers
                    type: array
                    items:
                      type: object
                      properties:
                        phone:
                          description: Formatted phone number
                          type: string
                        type:
                          description: The type of the phone number
                          type: string
                          enum:
                            - CELL
                            - MAIN
                            - IPHONE
                            - HOME
                            - WORK
                        waId:
                          description: 'WhatsApp ID _(supported channels: WhatsApp)_'
                          type: string
                    minItems: 0
                  urls:
                    description: A list of contact URLs
                    type: array
                    items:
                      type: object
                      properties:
                        url:
                          description: URL
                          type: string
                        type:
                          description: The type of the phone number
                          type: string
                          enum:
                            - HOME
                            - WORK
                    minItems: 0
                required:
                  - name
              minItems: 1
          required:
            - contacts
    content.json:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            payload:
              type: object
          required:
            - payload
    content.location:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            longitude:
              type: number
              description: Longitude of the location
            latitude:
              type: number
              description: Latitude of the location
            name:
              type: string
              description: Name of the location
            address:
              type: string
              description: Address of the location. Only displayed if name is present.
            url:
              type: string
              description: 'URL for the website where the location information was downloaded. _(WhatsApp restriction: available only on IN direction)_'
          required:
            - longitude
            - latitude
    content.template:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            templateId:
              type: string
              description: 'The template identifier. Click <a href="https://app.zenvia.com/home/templates" target="_blank">here</a> to go to the template page.'
            fields:
              type: object
              description: The available fields to be used in this template.
              properties:
                field:
                  type: string
                  description: Message that will be replaced on field
          required:
            - templateId
            - fields
    content.text:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            text:
              description: Text to be sent
              type: string
            payload:
              description: Payload of selected button
              type: string
          required:
            - text
    content.facebook.all:
      oneOf:
        - $ref: '#/components/schemas/content.text'
        - $ref: '#/components/schemas/content.facebook.file'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/content.text'
          file: '#/components/schemas/content.facebook.file'
    content.facebook.file:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            fileUrl:
              type: string
              description: The URL of the file to be sent.
            fileMimeType:
              type: string
              description: MIME type of the file to be sent.
          required:
            - fileUrl
            - fileMimeType
    content.sms.all:
      oneOf:
        - $ref: '#/components/schemas/content.text'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/content.text'
    content.whatsapp.all:
      oneOf:
        - $ref: '#/components/schemas/content.text'
        - $ref: '#/components/schemas/content.whatsapp.file'
        - $ref: '#/components/schemas/content.template'
        - $ref: '#/components/schemas/content.contacts'
        - $ref: '#/components/schemas/content.location'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/content.text'
          file: '#/components/schemas/content.whatsapp.file'
          template: '#/components/schemas/content.template'
          contacts: '#/components/schemas/content.contacts'
          location: '#/components/schemas/content.location'
    content.whatsapp.file:
      type: object
      allOf:
        - $ref: '#/components/schemas/content.base'
        - type: object
          properties:
            type:
              type: string
              example: file
            fileUrl:
              type: string
              description: The URL of the file to be sent.
              example: 'https://example.com/document.pdf'
            fileMimeType:
              type: string
              description: 'MIME type of the file to be sent. If not sent, the MIME type will be identified using the content type sent in the request header. See [supported contents and sizes.](#section/Limitations)'
              example: application/pdf
            fileCaption:
              type: string
              description: Some description for the file. Only applicable to images and videos.
              example: Some caption
            fileName:
              type: string
              description: The name of the file. Only applicable to documents.
              example: document.pdf
          required:
            - type
            - fileUrl
    error.base:
      title: Error Object
      description: This is a Error object model.
      type: object
      properties:
        code:
          title: Code
          description: An error code to identify the error programmatically.
          type: string
          readOnly: true
          example: VALIDATION_ERROR
        message:
          title: Message
          description: A human readable text to help on error troubleshooting.
          type: string
          readOnly: true
          example: Validation error
        details:
          title: Details
          description: Error details to help identify the problem source.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/error.errors'
      required:
        - code
        - message
    error.errors:
      title: Error object
      description: This is a Error object schema.
      type: object
      properties:
        code:
          title: Code
          description: Detail error code.
          type: string
          readOnly: true
        path:
          title: Path
          description: Error path.
          type: string
          readOnly: true
        message:
          title: Message
          description: Human readable message.
          type: string
          readOnly: true
      required:
        - code
        - message
    events.all:
      oneOf:
        - $ref: '#/components/schemas/events.message-event'
        - $ref: '#/components/schemas/events.message-status-event'
      discriminator:
        propertyName: type
        mapping:
          MESSAGE: '#/components/schemas/events.message-event'
          MESSAGE_STATUS: '#/components/schemas/events.message-status-event'
    events.base:
      type: object
      properties:
        id:
          title: Event Id
          type: string
        timestamp:
          title: Event Timestamp
          type: string
          format: date-time
        type:
          title: Event type
          type: string
          enum:
            - MESSAGE
            - MESSAGE_STATUS
        subscriptionId:
          title: Subscription Id
          type: string
    events.message-event:
      type: object
      allOf:
        - $ref: '#/components/schemas/events.base'
        - type: object
          properties:
            type:
              title: Event type
              type: string
              enum:
                - MESSAGE
                - MESSAGE_STATUS
              example: MESSAGE
            direction:
              title: Message Direction
              type: string
            channel:
              title: Message channel
              type: string
            message:
              $ref: '#/components/schemas/message.all'
    events.message-status-event:
      type: object
      allOf:
        - $ref: '#/components/schemas/events.base'
        - type: object
          properties:
            type:
              title: Event type
              type: string
              enum:
                - MESSAGE
                - MESSAGE_STATUS
              example: MESSAGE_STATUS
            channel:
              title: Message channel
              type: string
            messageId:
              title: Message ID
              description: The ID of the message whose status is being delived
              type: string
            contentIndex:
              title: Index of content that is receiving the status update
              type: number
            messageStatus:
              $ref: '#/components/schemas/events.message-status'
    events.message-status:
      type: object
      properties:
        timestamp:
          title: Status timestamp
          type: string
          format: date-time
        code:
          title: Status code
          description: Code that indicates the message status
          type: string
          enum:
            - REJECTED
            - SENT
            - DELIVERED
            - NOT_DELIVERED
            - READ
        description:
          title: Status description
          description: A description of status
          type: string
        cause:
          title: Status cause
          description: A likely raw message with the information about the status
          type: string
      required:
        - code
        - timestamp
    message.all:
      type: object
      allOf:
        - $ref: '#/components/schemas/message.base'
        - type: object
          properties:
            visitor:
              $ref: '#/components/schemas/message.visitor'
            contents:
              title: Message Contents
              description: A list of content to be sent
              type: array
              items:
                $ref: '#/components/schemas/content.whatsapp.all'
              minItems: 1
    message.base:
      title: Message Object
      description: This is a Message object model.
      type: object
      properties:
        id:
          title: Message ID
          description: An ID for this message. This can be used for future message consulting or callback notifications.
          type: string
          readOnly: true
        from:
          title: Sender ID
          description: This is the identifier of sender of this message. The sender shoud be created with a credential.
          type: string
        to:
          title: Recipient ID
          description: The recipient is the identifier of a contact in this channel.
          type: string
        direction:
          title: Message direction
          description: It indicates if message is received from channel (IN) or is sent to channel (OUT)
          type: string
          enum:
            - IN
            - OUT
          readOnly: true
        channel:
          title: Channel
          description: Message channel
          type: string
          readOnly: true
        contents:
          title: Message Contents
          description: A list of content to be sent
          type: array
          items:
            type: object
          minItems: 1
      required:
        - from
        - to
        - contents
    message.channel:
      type: string
      title: Channel
      description: Message channel
    message.facebook:
      type: object
      allOf:
        - $ref: '#/components/schemas/message.base'
        - type: object
          properties:
            contents:
              title: Message Contents
              description: A list of content to be sent
              type: array
              items:
                $ref: '#/components/schemas/content.facebook.all'
              minItems: 1
    message.sms:
      type: object
      allOf:
        - $ref: '#/components/schemas/message.base'
        - type: object
          properties:
            contents:
              title: Message Contents
              description: A list of content to be sent
              type: array
              items:
                $ref: '#/components/schemas/content.sms.all'
              minItems: 1
    message.visitor:
      title: Visitor Object
      description: It indicates the name of the visitor who sent the message
      type: object
      properties:
        name:
          title: Name
          description: Full name of the visitor
          type: string
        firstName:
          title: First name
          description: First name of the visitor
          type: string
        lastName:
          title: Last name
          description: Last name of the visitor
          type: string
    message.whatsapp:
      type: object
      allOf:
        - $ref: '#/components/schemas/message.base'
        - type: object
          properties:
            contents:
              title: Message Contents
              description: A list of content to be sent
              type: array
              items:
                $ref: '#/components/schemas/content.whatsapp.all'
              minItems: 1
    reports.flow.entries.base:
      title: Entry object for Flow Report
      description: The entry object model for Flow Report.
      type: object
      properties:
        flowId:
          title: Flow ID
          description: The flow identifier.
          type: string
        dispatchId:
          title: Dispatch ID
          description: The dispatch identifier.
          type: string
        sessionId:
          title: Session ID
          description: 'This ID represents a flow execution. In case of conversational flows, it identifies the conversation in our platform.'
          type: string
        firstEventTimestamp:
          title: First event timestamp
          description: Time of the first event with the client.
          type: string
        lastEventTimestamp:
          title: Last event timestamp
          description: Time of the last event with the client.
          type: string
        variables:
          title: Objects of varibles
          description: Object where session variables are saved.
          type: object
    reports.message.entry.base:
      title: Entry object for Message Report
      description: The entry object model for Message Report.
      type: object
      properties:
        channel:
          title: Channel
          type: string
          readOnly: true
        type:
          title: Message type
          description: 'The type of messages, which may be either "message" or "notification".'
          type: string
          readOnly: true
        directionInTotal:
          title: IN messages total
          description: The total of IN direction messages.
          type: number
          readOnly: true
        directionOutTotal:
          title: OUT messages total
          description: The total of OUT direction messages.
          type: number
          readOnly: true
        total:
          title: Messages total
          description: The total of messages including IN and OUT directions.
          type: number
          readOnly: true
    subscription.all:
      oneOf:
        - $ref: '#/components/schemas/subscription.message-subscription'
        - $ref: '#/components/schemas/subscription.message-status-subscription'
      discriminator:
        propertyName: eventType
        mapping:
          MESSAGE: '#/components/schemas/subscription.message-subscription'
          MESSAGE_STATUS: '#/components/schemas/subscription.message-status-subscription'
    subscription.base:
      type: object
      properties:
        id:
          title: Subscription Id
          type: string
          readOnly: true
        eventType:
          title: Event type to subscribe
          type: string
          enum:
            - MESSAGE
            - MESSAGE_STATUS
        webhook:
          allOf:
            - $ref: '#/components/schemas/subscription.webhook'
            - type: object
              required:
                - url
        status:
          $ref: '#/components/schemas/subscription.status'
        createdAt:
          title: Creation timestamp
          description: Creation timestamp in ISO format
          type: string
          readOnly: true
        updatedAt:
          title: Update timestamp
          description: Update timestamp in ISO format
          type: string
          readOnly: true
      required:
        - eventType
        - webhook
    subscription.message-status-subscription:
      type: object
      allOf:
        - $ref: '#/components/schemas/subscription.base'
        - type: object
          properties:
            criteria:
              type: object
              properties:
                channel:
                  $ref: '#/components/schemas/message.channel'
              required:
                - channel
          required:
            - criteria
    subscription.message-subscription:
      type: object
      allOf:
        - $ref: '#/components/schemas/subscription.base'
        - type: object
          properties:
            criteria:
              type: object
              properties:
                channel:
                  $ref: '#/components/schemas/message.channel'
                direction:
                  title: Message direction
                  description: It indicates if message is received from channel (IN) or is sent to channel (OUT)
                  type: string
                  enum:
                    - IN
                    - OUT
              required:
                - channel
          required:
            - criteria
    subscription.partial-subscription:
      type: object
      properties:
        webhook:
          $ref: '#/components/schemas/subscription.webhook'
        status:
          $ref: '#/components/schemas/subscription.status'
    subscription.status:
      title: Status of subscription
      type: string
      enum:
        - ACTIVE
        - DEGRADED
        - INACTIVE
    subscription.webhook:
      type: object
      properties:
        url:
          title: Webhook URL
          description: URL to post events
          type: string
        headers:
          title: Request headers
          type: object
    templates.partial-template:
      title: Template Object
      description: This is a Template object model.
      type: object
      properties:
        locale:
          $ref: '#/components/schemas/templates.template-locale'
        category:
          $ref: '#/components/schemas/templates.template-category'
        components:
          $ref: '#/components/schemas/templates.components.index'
        notificationEmail:
          $ref: '#/components/schemas/templates.template-notification-email'
    templates.template-category:
      title: Category
      description: Category of use for this template
      type: string
      enum:
        - ACCOUNT_UPDATE
        - PAYMENT_UPDATE
        - PERSONAL_FINANCE_UPDATE
        - SHIPPING_UPDATE
        - RESERVATION_UPDATE
        - ISSUE_RESOLUTION
        - APPOINTMENT_UPDATE
        - TRANSPORTATION_UPDATE
        - TICKET_UPDATE
        - ALERT_UPDATE
        - AUTO_REPLY
    templates.template-comment:
      type: object
      required:
        - author
        - role
        - text
      properties:
        id:
          title: Comment ID
          type: string
          readOnly: true
        author:
          title: Author
          description: Author
          type: string
        role:
          title: Role
          description: Author role
          type: string
          enum:
            - REQUESTER
            - REVIEWER
            - WHATSAPP
        text:
          title: Text
          description: Comment text
          type: string
        createdAt:
          title: Creation timestamp
          description: Creation timestamp in ISO format
          type: string
          readOnly: true
        updatedAt:
          title: Update timestamp
          description: Update timestamp in ISO format
          type: string
          readOnly: true
    templates.template-locale:
      title: Locale
      description: Template language and locale
      type: string
      enum:
        - af
        - sq
        - ar
        - az
        - bn
        - bg
        - ca
        - zh_CN
        - zh_HK
        - zh_TW
        - hr
        - cs
        - da
        - nl
        - en
        - en_GB
        - en_US
        - et
        - fil
        - fi
        - fr
        - de
        - el
        - gu
        - ha
        - he
        - hi
        - hu
        - id
        - ga
        - it
        - ja
        - kn
        - kk
        - ko
        - lo
        - lv
        - lt
        - mk
        - ms
        - ml
        - mr
        - nb
        - fa
        - pl
        - pt_BR
        - pt_PT
        - pa
        - ro
        - ru
        - sr
        - sk
        - sl
        - es
        - es_AR
        - es_ES
        - es_MX
        - sw
        - sv
        - ta
        - te
        - th
        - tr
        - uk
        - ur
        - uz
        - vi
        - zu
    templates.template-notification-email:
      title: Notification e-mail
      description: E-mail list (comma-separated) to send notifications about the message template approving process.
      type: string
    templates.template:
      title: Template Object
      description: This is a Template object model.
      type: object
      required:
        - name
        - locale
        - channel
        - senderId
        - category
        - components
      properties:
        id:
          title: Template ID
          type: string
          readOnly: true
        name:
          title: Template name
          description: The name of this template
          type: string
        locale:
          $ref: '#/components/schemas/templates.template-locale'
        channel:
          title: Channel
          description: 'Channel for template use. For now, only WHATSAPP channel is allowed.'
          type: string
          enum:
            - WHATSAPP
        senderId:
          title: Sender ID
          description: This is the identifier of sender for this template. The sender shoud be created with a credential.
          type: string
        category:
          $ref: '#/components/schemas/templates.template-category'
        components:
          $ref: '#/components/schemas/templates.components.index'
        notificationEmail:
          $ref: '#/components/schemas/templates.template-notification-email'
        text:
          title: Template text
          description: This is a text reference for this template. This field is a merge of all content components.
          type: string
          readOnly: true
        fields:
          title: Fields
          description: The available fields to be used in this template.
          type: array
          items:
            type: string
          minItems: 0
          readOnly: true
        comments:
          title: Comments
          description: Comments added to the template during the approval process.
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/templates.template-comment'
        status:
          title: Status of template
          type: string
          readOnly: true
          enum:
            - WAITING_REVIEW
            - REJECTED
            - WAITING_APPROVAL
            - APPROVED
        channels:
          title: Channels
          deprecated: true
          description: 'Channels where this template can be used. _Deprecated attribute, can be removed on next API versions._'
          type: array
          items:
            type: object
            properties:
              type:
                title: Template type
                type: string
                enum:
                  - WHATSAPP
                  - FACEBOOK
                  - SMS
              senderId:
                title: Sender ID
                type: string
              status:
                title: Status of template
                type: string
                enum:
                  - APPROVED
                  - REFUSED
                  - PENDING
                  - CANCELED
          minItems: 1
          maxItems: 1
          readOnly: true
        createdAt:
          title: Creation timestamp
          description: Creation timestamp in ISO format
          type: string
          readOnly: true
        updatedAt:
          title: Update timestamp
          description: Update timestamp in ISO format
          type: string
          readOnly: true
    templates.components.index:
      title: Components
      description: Message content of this template
      type: object
      required:
        - body
      properties:
        header:
          $ref: '#/components/schemas/templates.components.header.index'
        body:
          $ref: '#/components/schemas/templates.components.body.index'
        footer:
          $ref: '#/components/schemas/templates.components.footer.index'
        buttons:
          $ref: '#/components/schemas/templates.components.buttons.index'
    templates.components.body.index:
      title: Body
      description: Template body
      type: object
      required:
        - type
        - text
      properties:
        type:
          title: Body type
          description: 'The body should have a fixed or variable text. Variable text can have variables using format _{{var_name}}_'
          type: string
          enum:
            - TEXT_FIXED
            - TEXT_TEMPLATE
        text:
          title: Body text
          type: string
    templates.components.buttons.actions:
      type: object
      allOf:
        - $ref: '#/components/schemas/templates.components.buttons.base'
        - type: object
          properties:
            items:
              title: Buttons
              description: List of buttons. Only one URL and phone number can be sent
              maxItems: 2
              type: array
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/templates.components.buttons.button-item-url'
                  - $ref: '#/components/schemas/templates.components.buttons.button-item-phone-number'
                required:
                  - type
                discriminator:
                  propertyName: type
                  mapping:
                    URL: '#/components/schemas/templates.components.buttons.button-item-url'
                    PHONE_NUMBER: '#/components/schemas/templates.components.buttons.button-item-phone-number'
          required:
            - items
    templates.components.buttons.base:
      type: object
      properties:
        type:
          title: Content type
          type: string
      required:
        - type
    templates.components.buttons.button-item-base:
      type: object
      properties:
        type:
          title: Button type
          enum:
            - URL
            - PHONE_NUMBER
            - QUICK_REPLY
          type: string
        text:
          title: Button text
          type: string
      required:
        - type
        - text
    templates.components.buttons.button-item-phone-number:
      type: object
      allOf:
        - $ref: '#/components/schemas/templates.components.buttons.button-item-base'
        - type: object
          properties:
            phoneNumber:
              title: Phone number of button
              description: Phone number to be sent in the button
              type: string
          required:
            - type
            - text
            - phoneNumber
    templates.components.buttons.button-item-quick-reply:
      type: object
      allOf:
        - $ref: '#/components/schemas/templates.components.buttons.button-item-base'
        - type: object
          properties:
            payload:
              type: string
              title: Payload of button
              description: This payload is used for identify the click in the callback
          required:
            - type
            - text
            - payload
    templates.components.buttons.button-item-url:
      type: object
      allOf:
        - $ref: '#/components/schemas/templates.components.buttons.button-item-base'
        - type: object
          properties:
            url:
              title: URL of button
              description: URL to be sent in the button. It can be dynamic
              type: string
          required:
            - type
            - text
            - url
    templates.components.buttons.index:
      title: Buttons
      description: Template buttons
      type: object
      oneOf:
        - $ref: '#/components/schemas/templates.components.buttons.actions'
        - $ref: '#/components/schemas/templates.components.buttons.quick-replies'
      required:
        - type
      discriminator:
        propertyName: type
        mapping:
          ACTIONS: '#/components/schemas/templates.components.buttons.actions'
          QUICK_REPLIES: '#/components/schemas/templates.components.buttons.quick-replies'
    templates.components.buttons.quick-replies:
      type: object
      allOf:
        - $ref: '#/components/schemas/templates.components.buttons.base'
        - type: object
          properties:
            items:
              title: Buttons
              description: List of buttons
              maxItems: 3
              type: array
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/templates.components.buttons.button-item-quick-reply'
                required:
                  - type
                discriminator:
                  propertyName: type
                  mapping:
                    QUICK_REPLY: '#/components/schemas/templates.components.buttons.button-item-quick-reply'
          required:
            - items
    templates.components.footer.index:
      title: Footer
      description: Template footer
      type: object
      required:
        - type
        - text
      properties:
        type:
          title: Footer type
          description: The footer can only be a fixed text
          type: string
          enum:
            - TEXT_FIXED
        text:
          title: Footer text
          type: string
    templates.components.header.index:
      title: Header
      description: Template header
      type: object
      required:
        - type
      properties:
        type:
          title: Header type
          description: 'The header can have an image, document or text.'
          type: string
          enum:
            - MEDIA_DOCUMENT
            - MEDIA_IMAGE
            - MEDIA_VIDEO
            - TEXT_FIXED
            - TEXT_TEMPLATE
        text:
          title: Header text
          type: string
  responses:
    error:
      description: 'Error response. See the [Error Handling](#section/API-Design/Error-Handling) section for details.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error.base'
  parameters:
    chatbotId:
      name: chatbotId
      in: path
      required: true
      description: the chatbot identifier
      schema:
        type: string
    subscriptionId:
      name: subscriptionId
      in: path
      required: true
      description: the subscription identifier
      schema:
        type: string
    templateCommentId:
      name: templateCommentId
      in: path
      required: true
      description: the comment identifier.
      schema:
        type: string
    templateId:
      name: templateId
      in: path
      required: true
      description: 'the template identifier. Click <a href="https://app.zenvia.com/home/templates">here</a>.'
      schema:
        type: string
    reports.flow.dispatchId:
      name: dispatchId
      in: query
      required: false
      description: This is the ID generated at the time of dispatch.
      schema:
        title: Dispatch ID
        type: string
    reports.flow.endDate:
      name: endDate
      in: query
      required: false
      description: The end of the period to query entries.
      schema:
        type: string
        format: date
    reports.flow.flowId:
      name: flowId
      in: query
      required: false
      description: 'This is the flow identifier. You can view your <a href="https://app.zenvia.com/home/chatbot" target="_blank"> Flow IDs here.</a>'
      schema:
        title: Flow ID
        type: string
    reports.flow.sessionId:
      name: sessionId
      in: query
      required: false
      description: 'This ID represents a flow execution. In case of conversational flows, it identifies the conversation in our platform.'
      schema:
        title: Session ID
        type: string
    reports.flow.startDate:
      name: startDate
      in: query
      required: true
      description: The start of the period to query entries.
      schema:
        type: string
        format: date
    reports.message.channels:
      name: channels
      in: query
      required: false
      description: A comma-separated list of the channels identifier.
      schema:
        type: string
    reports.message.endDate:
      name: endDate
      in: query
      required: true
      description: The end of the period to query entries.
      schema:
        type: string
        format: date
    reports.message.startDate:
      name: startDate
      in: query
      required: true
      description: The start of the period to query entries.
      schema:
        type: string
        format: date
    reports.message.type:
      name: type
      in: query
      required: false
      description: The type of the messages.
      schema:
        type: string
        enum:
          - message
          - notification
    templates.channel:
      name: channel
      in: query
      required: false
      description: Filter by channel
      schema:
        type: string
        enum:
          - WHATSAPP
      example: WHATSAPP
    templates.senderId:
      name: senderId
      in: query
      required: false
      description: Filter by senderId
      schema:
        type: string
      example: b5agf1-y237-11e8-b127-1230f6c2d98m
    templates.status:
      name: status
      in: query
      description: Filter by status
      required: false
      schema:
        type: string
        enum:
          - WAITING_REVIEW
          - REJECTED
          - WAITING_APPROVAL
          - APPROVED
      example: APPROVED
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    JWT:
      description: User JWT token used for Zenvia front-end service
      type: http
      scheme: bearer
      bearerFormat: JWT
    TOKEN:
      description: Token created on API console for clients using server to server integration
      type: apiKey
      in: header
      name: X-API-TOKEN
  links: {}
  callbacks:
    subscription-event:
      '{$request.body#/webhook/url}':
        post:
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/events.all'
          responses:
            '200':
              description: webhook successfully processed and no retries will be performed
security:
  - JWT: []
  - TOKEN: []
tags:
  - name: SMS
    description: |
      The SMS channel may be used after its activation on [Zenvia platform](https://app.zenvia.com/home/credentials).
      <br/><br/>
  - name: WhatsApp
    description: |
      The WhatsApp channel may be used after its activation on Zenvia platform.

      To activate WhatsApp you a need a registered number on WhatsApp Business API and account information configured on Zenvia platform.

      **Get in touch with Zenvia consultants to start your account creation.**


      ## Limitations

      The WhatsApp API has some limitations:

      * To start a conversation with someone you need a special type of message ([a template message](#notification-contents)), which needs an approval before being used.

      Supported content types and sizes:

      | Media | Content Type | Size |
      |---|---|---|
      | document | Any valid MIME type. | 100&nbsp;MB |
      | image | image/jpeg<br>image/png | 5 MB |
      | audio | audio/acc<br>audio/mp4<br>audio/amr<br>audio/mpeg<br>audio/ogg; codecs=opus | 16 MB |
      | video | video/mp4<br>video/3gpp<br>**Note:** Only H.264 video codec and AAC audio codec is supported. | 16 MB |


      ## Message sender and recipient

      When you send some message for one contact using WhatsApp channel:

      * Recipient: is the phone number of contact
      * Sender: is the WhatsApp sender id configured on [Zenvia platform](https://app.zenvia.com/home/credentials/whatsapp/list)

      When you receive a message from one contact, the sender and recipient is inverted:

      * Recipient: is the WhatsApp sender id configured on [Zenvia platform](https://app.zenvia.com/home/credentials/whatsapp/list)
      * Sender: is the phone number of contact

      In API the sender is the field `from` and the receiver is the field `to` of message object.


      ## Message content types
      WhatsApp support a few types of contents, which we categorize into to groups: standard contents, and notification contents.
      <br><br>

      ### Standard contents
      This kind of message content may only be sent as a reply to a message sent by the user. So these kind of message content cannot be sent to start a interaction with an user. And even as a reply, these kind of message contents can only be sent if the last message from the user was sent less than 24 hours ago.

      #### Text content
      This type of content is the most used type of content, and its composed of a plain text.

      #### File content
      This is used to send a file to the user. The file will be presented to the user in different manner based on the file type. There are four types of presentation:
      * Image
      * Video
      * Audio
      * Document
      <br><br>

      #### Contacts content
      Use this type of content to send contacts information to the user.

      #### Location content
      This content is used to send location messages representing a point on the map to the user.

      ### Notification contents
      These types of contents are special, because they are allowed to be sent without any user interaction and also even if the last user message was sent more than 24 hours ago.

      However, it is not allowed to send these these types of contents without some kind of opt-in from the user. This is a business restriction, not a technical one.

      #### Template content
      Template contents have a fixed text content, with a few variables placed where necessary. This type of content must be submitted for approval to WhatsApp. The nature of the content that is subjected to approval is very limited.

      ##### Submitting a template content for approval
      If you already have a WhatsApp business account with us, just send email to *whatsapp@zenvia.com* and we will start the process for you.
  - name: Facebook
    description: |
      The Facebook channel may be used after you connect a Facebook Page on [Zenvia platform](https://app.zenvia.com/home/credentials).

      ## Message sender and recipient

      When you send some message for one contact using Facebook channel:

      * Recipient: is the user id on your page (PSID - page scoped id)
      * Sender: is your page id

      When you receive a message from one contact, the sender and recipient is inverted:

      * Recipient: is your page id
      * Sender: is the user id on your page (PSID - page scoped id)

      In API the sender is the field `from` and the receiver is the field `to` of message object.
  - name: Webhooks
    description: |
      Webhooks allow you to receive events in the configured URL. The available type of events are **MESSAGE** and **MESSAGE_STATUS**:

      ## MESSAGE

      The event type MESSAGE refers to messages dispatched and/or received in the desired channel.

      When you are subscribed in this type of event, your webhook will receive a request with the schema as follows:

      <SchemaDefinition schemaRef="#/components/schemas/events.message-event" />

      The <code>direction</code> field, that indicates if the message is received from a channel or sent to a channel, may assume the following values: IN or OUT.

      > **Note:** The **OUT** direction is under construction.

      ## MESSAGE_STATUS

      The event type MESSAGE_STATUS refers to a status update related to a prior sent message.

      If you are subscribed in this type of event, your webhook will receive a request with the schema as follows:

      <SchemaDefinition schemaRef="#/components/schemas/events.message-status-event" />
      <br>

      ### Code field
      The <code>code</code> field may assume the following values:
      * **SENT**: The message sent by your business was received by the provider's server.
      * **REJECTED**: The message sent by your business failed to be sent to the provider's server.
      * **DELIVERED**: The message sent by your business was delivered to the user's device.
      * **NOT_DELIVERED**: The message sent by your business failed to be sent to the user's device. The reason for the failure will be included in the <code>causes</code> field.
      * **READ**: The message sent by your business was read by the user. This status might not be sent, since it depends on the channel and on the user's device configuration.
      <br><br>

      ### Description field
      The <code>description</code> field is directly tied to the <code>code</code> field, and it may assume the following values:
      * *SENT: "**The message has been forwarded to the provider**".*
      * *DELIVERED: "**The message has been delivered by the provider**".*
      * *READ: "**The message has been read by the recipient**".*
      * *REJECTED: "**The message was rejected by the provider**".*
      * *NOT_DELIVERED: "**The provider was unable to deliver the message**".*


      ## Webhook request error handling
      As described before, webhooks allow you to receive events in your application.

      However, if a webhook request fails, a retry procedure begins. This procedure consists of the following rules:
      * There will be at least 30 seconds between each request attempt for the same event.
      * There will be at most 30 request attempts for the same event.

      This means a single event may be retried for around 15 minutes. After this the event will no longer be available.

      Event retries are handled separately from the initial request. This ensures webhooks without request fails are not penalized by webhooks with many request fails.
      <br/><br/>

      ### Webhook (quality) status handling
      Multiple errors on a single webhook may change its (quality) status. The possible webhook statuses are:
      * **ACTIVE**: This is the initial status for every webhook created.
      * **DEGRADED**: After a set of rules is met, an *ACTIVE* webhook will be demoted to *DEGRADED*.
      <br>Event requests for *DEGRADED* webhooks are handled separately from *ACTIVE* webhooks.
      <br>This is to ensure high quality webhooks are not penalized by the handling of low quality webhooks.
      * **INACTIVE**: After another set of rules is met, a *DEGRADED* webhook will be demoted to *INACTIVE*.
      Events no longer will be posted on webhooks with *INACTIVE* status.

      The rules which trigger status changes are the following:
      * 10 consecutive request fails on an *ACTIVE* webhook will result in demotion to *DEGRADED*.
      * 500 consecutive request fails will result in demotion to *INACTIVE*.
        * Responses slower than *1 second* also count as a fail and may result in status demotion.
          * Only slow responses on the initial request count as a fail.
          * Only slow responses on an *ACTIVE* webhook count as a fail.
           <br>Therefore, slow responses should never result in demotion to *INACTIVE*.
        * All connection timeouts count as fail and may result in status demotion.
          <br>The connection timeout is *8 seconds*.
        * All response (read) timeouts count as fail and may result in status demotion.
          <br>The response timeout is *8 seconds*.
      * 50 consecutives successful requests on a *DEGRADED* webhook are necessary for a promotion back to *ACTIVE*.
        * Successful requests on retry atempts also count toward status promotion.
        * Responses slower than *1 second* do not count either as a success or as a fail.
      * Any manual update done to the webhook on the [API console](https://app.zenvia.com/home/api) will automatically
      promote either a *DEGRADED* or an *INACTIVE* webhook back to *ACTIVE*.

      Both the success and fail counters automatically reset themselves *8 hours* after the first increment.
  - name: Templates
    description: |
      Message Templates are message formats for common reusable messages a business may want to send. Businesses must use Message Templates for sending notifications to customers.

      This allows a business to send just the template identifier along with the appropriate parameters instead of the full message content.

      Templates have the following components:
      * header
      * body
      * footer
      * buttons

      The components object allows you to indicate the type of message and the message's parameters.

      ## Standard message templates

      The standard message templates enables you to send plain text-only messages using a <code>body</code> components object.

      ## Media message templates

      Media message templates expand the content you can send recipients beyond the standard message template type to include media, headers, and footers using a <code>header</code> and <code>footer</code> components object.

      ## Interactive message templates

      Interactive message templates expand the content you can send recipients beyond the standard message template and media messages template types to include interactive buttons using the <code>button</code> components object.

      There are two types of predefined buttons offered:

      ### ACTIONS

      Allows your customer to call a phone number and visit a website.

      ### QUICK REPLIES

      Allows your customer to return a simple text message.

      When a quick reply message is sent and the customer clicks one of the options, your webhook will receive a `MESSAGE_EVENT` if you subscribed to that kind of event. The `MESSAGE_EVENT` will contains one content of type `text` with the <code>text</code> and <code>payload</code> fields defined in the creation of interactive template.

      You can know more about it in the [subscriptions section](#section/MESSAGE).
  - name: Message Report
    description: |
      Report to show all messages sent and received in a period, it may also filter by channel or type.
  - name: Flow Report
    description: 'Report to provide current state of sessions (executions) of flows in a period. These states contain session variables and their current value. The report can be filtered by flow, dispatch or session.'
x-tagGroups:
  - name: Messaging
    tags:
      - SMS
      - WhatsApp
      - Facebook
  - name: Webhooks
    tags:
      - Webhooks
  - name: Templates
    tags:
      - Templates
  - name: Reports
    tags:
      - Message Report
      - Flow Report
